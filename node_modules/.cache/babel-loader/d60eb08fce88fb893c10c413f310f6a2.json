{"ast":null,"code":"var _jsxFileName = \"/home/ajjubhai/Desktop/deva/calculator/src/Calculator.js\";\nimport React, { Component, useState } from 'react';\nimport './Calculator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Numberinput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, '00', '000'];\nconst Operator = ['+', '-', '*', '/', '%', '.', '<', '='];\nlet Result;\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Firstnum: 0,\n      // isFirstNumber: true,\n      // Secondnum: 0,\n      // isSecondNumber: true,\n      // Result: 0,\n      // isResult: true,\n      result: 0,\n      operationString: ''\n    };\n\n    inputNum = x => {// if (this.state.isFirstNumber) {\n      //   this.setState({\n      //     Firstnum: x.target.innerText,\n      //     isFirstNumber: false,\n      //   });\n      // } else {\n      //   this.setState({\n      //     Firstnum: this.state.Firstnum + x.target.innerText,\n      //   });\n      // }\n    };\n\n    this.InputOperator = x => {\n      if (x.target.innerText == '<') {\n        this.setState({\n          Firstnum: 0,\n          isFirstNumber: true\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calculator\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: this.state.Firstnum,\n          onChange: this.InputNum\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input_btn\",\n            children: Numberinput.map(x => {\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                id: `input${x}`,\n                onClick: () => this.inputNum(x),\n                children: x\n              }, `input${x}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"operate_btn\",\n            children: Operator.map(x => {\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                id: `input${x}`,\n                onClick: x => this.inputNum(x),\n                children: x\n              }, `input${x}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["/home/ajjubhai/Desktop/deva/calculator/src/Calculator.js"],"names":["React","Component","useState","Numberinput","Operator","Result","Calculator","constructor","props","state","result","operationString","inputNum","x","InputOperator","target","innerText","setState","Firstnum","isFirstNumber","render","InputNum","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,kBAAP;;AAEA,MAAMC,WAAW,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,IAA/B,EAAqC,KAArC,CAApB;AACA,MAAMC,QAAQ,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAAjB;AACA,IAAIC,MAAJ;;AACA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AACjCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACX;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,MAAM,EAAE,CAPG;AAQXC,MAAAA,eAAe,EAAE;AARN,KAAb;;AAWAC,IAAAA,QAAQ,GAAIC,CAAD,IAAO,CAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAXD;;AAaA,SAAKC,aAAL,GAAsBD,CAAD,IAAO;AAC1B,UAAIA,CAAC,CAACE,MAAF,CAASC,SAAT,IAAsB,GAA1B,EAA+B;AAC7B,aAAKC,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAE,CAAZ;AAAeC,UAAAA,aAAa,EAAE;AAA9B,SAAd;AACD;AACF,KAJD;AAKD;;AACDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAE,KAAKX,KAAL,CAAWS,QAFpB;AAGE,UAAA,QAAQ,EAAE,KAAKG;AAHjB;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,sBACGlB,WAAW,CAACmB,GAAZ,CAAiBT,CAAD,IAAO;AACtB,kCACE;AACE,gBAAA,EAAE,EAAG,QAAOA,CAAE,EADhB;AAGE,gBAAA,OAAO,EAAE,MAAM,KAAKD,QAAL,CAAcC,CAAd,CAHjB;AAAA,0BAKGA;AALH,iBAEQ,QAAOA,CAAE,EAFjB;AAAA;AAAA;AAAA;AAAA,sBADF;AASD,aAVA;AADH;AAAA;AAAA;AAAA;AAAA,kBADF,eAcE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,sBACGT,QAAQ,CAACkB,GAAT,CAAcT,CAAD,IAAO;AACnB,kCACE;AACE,gBAAA,EAAE,EAAG,QAAOA,CAAE,EADhB;AAGE,gBAAA,OAAO,EAAGA,CAAD,IAAO,KAAKD,QAAL,CAAcC,CAAd,CAHlB;AAAA,0BAKGA;AALH,iBAEQ,QAAOA,CAAE,EAFjB;AAAA;AAAA;AAAA;AAAA,sBADF;AASD,aAVA;AADH;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAuCD;;AAzEgC;;AA4EnC,eAAeP,UAAf","sourcesContent":["import React, { Component, useState } from 'react';\nimport './Calculator.css';\n\nconst Numberinput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, '00', '000'];\nconst Operator = ['+', '-', '*', '/', '%', '.', '<', '='];\nlet Result;\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Firstnum: 0,\n      // isFirstNumber: true,\n      // Secondnum: 0,\n      // isSecondNumber: true,\n      // Result: 0,\n      // isResult: true,\n      result: 0,\n      operationString: '',\n    };\n\n    inputNum = (x) => {\n      // if (this.state.isFirstNumber) {\n      //   this.setState({\n      //     Firstnum: x.target.innerText,\n      //     isFirstNumber: false,\n      //   });\n      // } else {\n      //   this.setState({\n      //     Firstnum: this.state.Firstnum + x.target.innerText,\n      //   });\n      // }\n    };\n\n    this.InputOperator = (x) => {\n      if (x.target.innerText == '<') {\n        this.setState({ Firstnum: 0, isFirstNumber: true });\n      }\n    };\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"calculator\">\n          <input\n            type=\"number\"\n            value={this.state.Firstnum}\n            onChange={this.InputNum}\n          />\n          <div className=\"btn\">\n            <div className=\"input_btn\">\n              {Numberinput.map((x) => {\n                return (\n                  <button\n                    id={`input${x}`}\n                    key={`input${x}`}\n                    onClick={() => this.inputNum(x)}\n                  >\n                    {x}\n                  </button>\n                );\n              })}\n            </div>\n            <div className=\"operate_btn\">\n              {Operator.map((x) => {\n                return (\n                  <button\n                    id={`input${x}`}\n                    key={`input${x}`}\n                    onClick={(x) => this.inputNum(x)}\n                  >\n                    {x}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n"]},"metadata":{},"sourceType":"module"}