{"ast":null,"code":"var _jsxFileName = \"/home/ajjubhai/Desktop/deva/calculator/src/Calculator.js\";\nimport React, { Component, useState } from 'react';\nimport './Calculator.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Numberinput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, '00', '000'];\nconst Operator = ['+', '-', '*', '/', '%', '.', '<', '='];\nlet Result;\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.InputOperator = x => {\n      if (x.target.innerText == '<') {\n        this.setState({\n          Firstnum: 0,\n          isFirstNumber: true\n        });\n      }\n    };\n\n    this.inputNum = x => {\n      const {\n        operationString,\n        result,\n        operand\n      } = this.state;\n      let resultToShow;\n      operation = operationString + '' + x;\n\n      if (!result && Numberinput.indexOf(x) > -1) {\n        debugger;\n        resultToShow = x;\n        this.setState({\n          result: resultToShow\n        });\n      } else if (Operator.indexOf(x) > -1) {\n        debugger; // resultToShow = operationString;\n        // operand = x;\n        // result + '' + x;\n\n        this.setState({\n          operand: x\n        });\n      } else if (Numberinput.indexOf(x) > -1) {\n        debugger;\n        if (operand === '+') resultToShow = parseInt(result) + x;\n        if (operand === '-') resultToShow = parseInt(result) - x;\n        if (operand === '/') resultToShow = parseInt(result) / x;\n        if (operand === '*') resultToShow = parseInt(result) * x;\n        if (operand === '=') operation = resultToShow; // if (!operand) resultToShow = parseInt(result + '' + x);\n\n        !operand && this.setState({\n          result: resultToShow,\n          operationString\n        });\n        operand && this.setState({\n          result: resultToShow,\n          operand: '',\n          operationString\n        });\n      } // if (this.state.isFirstNumber) {\n      //   this.setState({\n      //     Firstnum: x.target.innerText,\n      //     isFirstNumber: false,\n      //   });\n      // } else {\n      //   this.setState({\n      //     Firstnum: this.state.Firstnum + x.target.innerText,\n      //   });\n      // }\n\n    };\n\n    this.state = {\n      // Firstnum: 0,\n      // isFirstNumber: true,\n      // Secondnum: 0,\n      // isSecondNumber: true,\n      // Result: 0,\n      // isResult: true,\n      result: 0,\n      operationString: 0,\n      operand: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calculator\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: this.state.result,\n          onChange: event => this.inputNum(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input_btn\",\n            children: Numberinput.map(x => {\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                id: `input${x}`,\n                onClick: () => this.inputNum(x),\n                children: x\n              }, `input${x}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"operate_btn\",\n            children: Operator.map(x => {\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                id: `input${x}`,\n                onClick: () => {\n                  this.inputNum(x);\n                },\n                children: x\n              }, `input${x}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["/home/ajjubhai/Desktop/deva/calculator/src/Calculator.js"],"names":["React","Component","useState","Numberinput","Operator","Result","Calculator","constructor","props","InputOperator","x","target","innerText","setState","Firstnum","isFirstNumber","inputNum","operationString","result","operand","state","resultToShow","operation","indexOf","parseInt","render","event","value","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,kBAAP;;AAEA,MAAMC,WAAW,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,IAA/B,EAAqC,KAArC,CAApB;AACA,MAAMC,QAAQ,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,CAAjB;AACA,IAAIC,MAAJ;;AACA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AACjCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAenBC,aAfmB,GAeFC,CAAD,IAAO;AACrB,UAAIA,CAAC,CAACC,MAAF,CAASC,SAAT,IAAsB,GAA1B,EAA+B;AAC7B,aAAKC,QAAL,CAAc;AAAEC,UAAAA,QAAQ,EAAE,CAAZ;AAAeC,UAAAA,aAAa,EAAE;AAA9B,SAAd;AACD;AACF,KAnBkB;;AAAA,SAqBnBC,QArBmB,GAqBPN,CAAD,IAAO;AAChB,YAAM;AAAEO,QAAAA,eAAF;AAAmBC,QAAAA,MAAnB;AAA2BC,QAAAA;AAA3B,UAAuC,KAAKC,KAAlD;AACA,UAAIC,YAAJ;AACAC,MAAAA,SAAS,GAAGL,eAAe,GAAG,EAAlB,GAAuBP,CAAnC;;AAEA,UAAI,CAACQ,MAAD,IAAWf,WAAW,CAACoB,OAAZ,CAAoBb,CAApB,IAAyB,CAAC,CAAzC,EAA4C;AAC1C;AACAW,QAAAA,YAAY,GAAGX,CAAf;AACA,aAAKG,QAAL,CAAc;AAAEK,UAAAA,MAAM,EAAEG;AAAV,SAAd;AACD,OAJD,MAIO,IAAIjB,QAAQ,CAACmB,OAAT,CAAiBb,CAAjB,IAAsB,CAAC,CAA3B,EAA8B;AACnC,iBADmC,CAEnC;AACA;AACA;;AACA,aAAKG,QAAL,CAAc;AAAEM,UAAAA,OAAO,EAAET;AAAX,SAAd;AACD,OANM,MAMA,IAAIP,WAAW,CAACoB,OAAZ,CAAoBb,CAApB,IAAyB,CAAC,CAA9B,EAAiC;AACtC;AACA,YAAIS,OAAO,KAAK,GAAhB,EAAqBE,YAAY,GAAGG,QAAQ,CAACN,MAAD,CAAR,GAAmBR,CAAlC;AACrB,YAAIS,OAAO,KAAK,GAAhB,EAAqBE,YAAY,GAAGG,QAAQ,CAACN,MAAD,CAAR,GAAmBR,CAAlC;AACrB,YAAIS,OAAO,KAAK,GAAhB,EAAqBE,YAAY,GAAGG,QAAQ,CAACN,MAAD,CAAR,GAAmBR,CAAlC;AACrB,YAAIS,OAAO,KAAK,GAAhB,EAAqBE,YAAY,GAAGG,QAAQ,CAACN,MAAD,CAAR,GAAmBR,CAAlC;AACrB,YAAIS,OAAO,KAAK,GAAhB,EAAqBG,SAAS,GAAGD,YAAZ,CANiB,CAOtC;;AAEA,SAACF,OAAD,IAAY,KAAKN,QAAL,CAAc;AAAEK,UAAAA,MAAM,EAAEG,YAAV;AAAwBJ,UAAAA;AAAxB,SAAd,CAAZ;AACAE,QAAAA,OAAO,IACL,KAAKN,QAAL,CAAc;AAAEK,UAAAA,MAAM,EAAEG,YAAV;AAAwBF,UAAAA,OAAO,EAAE,EAAjC;AAAqCF,UAAAA;AAArC,SAAd,CADF;AAED,OA3Be,CA6BhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,KA5DkB;;AAEjB,SAAKG,KAAL,GAAa;AACX;AACA;AACA;AACA;AACA;AACA;AACAF,MAAAA,MAAM,EAAE,CAPG;AAQXD,MAAAA,eAAe,EAAE,CARN;AASXE,MAAAA,OAAO,EAAE;AATE,KAAb;AAWD;;AAgDDM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAE,KAAKL,KAAL,CAAWF,MAFpB;AAGE,UAAA,QAAQ,EAAGQ,KAAD,IAAW,KAAKV,QAAL,CAAcU,KAAK,CAACf,MAAN,CAAagB,KAA3B;AAHvB;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,sBACGxB,WAAW,CAACyB,GAAZ,CAAiBlB,CAAD,IAAO;AACtB,kCACE;AACE,gBAAA,EAAE,EAAG,QAAOA,CAAE,EADhB;AAGE,gBAAA,OAAO,EAAE,MAAM,KAAKM,QAAL,CAAcN,CAAd,CAHjB;AAAA,0BAKGA;AALH,iBAEQ,QAAOA,CAAE,EAFjB;AAAA;AAAA;AAAA;AAAA,sBADF;AASD,aAVA;AADH;AAAA;AAAA;AAAA;AAAA,kBADF,eAcE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,sBACGN,QAAQ,CAACwB,GAAT,CAAclB,CAAD,IAAO;AACnB,kCACE;AACE,gBAAA,EAAE,EAAG,QAAOA,CAAE,EADhB;AAGE,gBAAA,OAAO,EAAE,MAAM;AACb,uBAAKM,QAAL,CAAcN,CAAd;AACD,iBALH;AAAA,0BAOGA;AAPH,iBAEQ,QAAOA,CAAE,EAFjB;AAAA;AAAA;AAAA;AAAA,sBADF;AAWD,aAZA;AADH;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAyCD;;AAxGgC;;AA2GnC,eAAeJ,UAAf","sourcesContent":["import React, { Component, useState } from 'react';\nimport './Calculator.css';\n\nconst Numberinput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, '00', '000'];\nconst Operator = ['+', '-', '*', '/', '%', '.', '<', '='];\nlet Result;\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Firstnum: 0,\n      // isFirstNumber: true,\n      // Secondnum: 0,\n      // isSecondNumber: true,\n      // Result: 0,\n      // isResult: true,\n      result: 0,\n      operationString: 0,\n      operand: '',\n    };\n  }\n\n  InputOperator = (x) => {\n    if (x.target.innerText == '<') {\n      this.setState({ Firstnum: 0, isFirstNumber: true });\n    }\n  };\n\n  inputNum = (x) => {\n    const { operationString, result, operand } = this.state;\n    let resultToShow;\n    operation = operationString + '' + x;\n\n    if (!result && Numberinput.indexOf(x) > -1) {\n      debugger;\n      resultToShow = x;\n      this.setState({ result: resultToShow });\n    } else if (Operator.indexOf(x) > -1) {\n      debugger;\n      // resultToShow = operationString;\n      // operand = x;\n      // result + '' + x;\n      this.setState({ operand: x });\n    } else if (Numberinput.indexOf(x) > -1) {\n      debugger;\n      if (operand === '+') resultToShow = parseInt(result) + x;\n      if (operand === '-') resultToShow = parseInt(result) - x;\n      if (operand === '/') resultToShow = parseInt(result) / x;\n      if (operand === '*') resultToShow = parseInt(result) * x;\n      if (operand === '=') operation = resultToShow;\n      // if (!operand) resultToShow = parseInt(result + '' + x);\n\n      !operand && this.setState({ result: resultToShow, operationString });\n      operand &&\n        this.setState({ result: resultToShow, operand: '', operationString });\n    }\n\n    // if (this.state.isFirstNumber) {\n    //   this.setState({\n    //     Firstnum: x.target.innerText,\n    //     isFirstNumber: false,\n    //   });\n    // } else {\n    //   this.setState({\n    //     Firstnum: this.state.Firstnum + x.target.innerText,\n    //   });\n    // }\n  };\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"calculator\">\n          <input\n            type=\"number\"\n            value={this.state.result}\n            onChange={(event) => this.inputNum(event.target.value)}\n          />\n          <div className=\"btn\">\n            <div className=\"input_btn\">\n              {Numberinput.map((x) => {\n                return (\n                  <button\n                    id={`input${x}`}\n                    key={`input${x}`}\n                    onClick={() => this.inputNum(x)}\n                  >\n                    {x}\n                  </button>\n                );\n              })}\n            </div>\n            <div className=\"operate_btn\">\n              {Operator.map((x) => {\n                return (\n                  <button\n                    id={`input${x}`}\n                    key={`input${x}`}\n                    onClick={() => {\n                      this.inputNum(x);\n                    }}\n                  >\n                    {x}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n"]},"metadata":{},"sourceType":"module"}